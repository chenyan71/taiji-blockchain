/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.networknt.taiji.token;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TokenCreatedEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord, TokenEvent {
  private static final long serialVersionUID = 6900066703985250780L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TokenCreatedEvent\",\"namespace\":\"com.networknt.taiji.token\",\"fields\":[{\"name\":\"EventId\",\"type\":{\"type\":\"record\",\"name\":\"EventId\",\"namespace\":\"com.networknt.taiji.event\",\"fields\":[{\"name\":\"address\",\"type\":\"string\",\"doc\":\"owner address that create the token\"},{\"name\":\"nonce\",\"type\":\"long\",\"doc\":\"the number of the transactions for the address\"}]}},{\"name\":\"currency\",\"type\":[\"string\",\"null\"],\"doc\":\"the currency blockchain the token is associated to\",\"default\":\"taiji\"},{\"name\":\"entityAddress\",\"type\":\"string\",\"doc\":\"token address which is the unique identifier\"},{\"name\":\"name\",\"type\":\"string\",\"doc\":\"name of the token\"},{\"name\":\"symbol\",\"type\":\"string\",\"doc\":\"token symbol which is one word capitalized\"},{\"name\":\"totalSupply\",\"type\":\"long\",\"doc\":\"total supply of the token\"},{\"name\":\"decimals\",\"type\":\"int\",\"doc\":\"number of decimals a token can be split\"},{\"name\":\"timestamp\",\"type\":[\"null\",\"long\"],\"doc\":\"time the event is recorded on the blockchain\",\"default\":null},{\"name\":\"offset\",\"type\":[\"null\",\"long\"],\"doc\":\"kafka partition offset\",\"default\":null},{\"name\":\"partition\",\"type\":[\"null\",\"int\"],\"doc\":\"kafka partition id\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TokenCreatedEvent> ENCODER =
      new BinaryMessageEncoder<TokenCreatedEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TokenCreatedEvent> DECODER =
      new BinaryMessageDecoder<TokenCreatedEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<TokenCreatedEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<TokenCreatedEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TokenCreatedEvent>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this TokenCreatedEvent to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a TokenCreatedEvent from a ByteBuffer. */
  public static TokenCreatedEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public com.networknt.taiji.event.EventId EventId;
  /** the currency blockchain the token is associated to */
  @Deprecated public java.lang.CharSequence currency;
  /** token address which is the unique identifier */
  @Deprecated public java.lang.CharSequence entityAddress;
  /** name of the token */
  @Deprecated public java.lang.CharSequence name;
  /** token symbol which is one word capitalized */
  @Deprecated public java.lang.CharSequence symbol;
  /** total supply of the token */
  @Deprecated public long totalSupply;
  /** number of decimals a token can be split */
  @Deprecated public int decimals;
  /** time the event is recorded on the blockchain */
  @Deprecated public java.lang.Long timestamp;
  /** kafka partition offset */
  @Deprecated public java.lang.Long offset;
  /** kafka partition id */
  @Deprecated public java.lang.Integer partition;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TokenCreatedEvent() {}

  /**
   * All-args constructor.
   * @param EventId The new value for EventId
   * @param currency the currency blockchain the token is associated to
   * @param entityAddress token address which is the unique identifier
   * @param name name of the token
   * @param symbol token symbol which is one word capitalized
   * @param totalSupply total supply of the token
   * @param decimals number of decimals a token can be split
   * @param timestamp time the event is recorded on the blockchain
   * @param offset kafka partition offset
   * @param partition kafka partition id
   */
  public TokenCreatedEvent(com.networknt.taiji.event.EventId EventId, java.lang.CharSequence currency, java.lang.CharSequence entityAddress, java.lang.CharSequence name, java.lang.CharSequence symbol, java.lang.Long totalSupply, java.lang.Integer decimals, java.lang.Long timestamp, java.lang.Long offset, java.lang.Integer partition) {
    this.EventId = EventId;
    this.currency = currency;
    this.entityAddress = entityAddress;
    this.name = name;
    this.symbol = symbol;
    this.totalSupply = totalSupply;
    this.decimals = decimals;
    this.timestamp = timestamp;
    this.offset = offset;
    this.partition = partition;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return EventId;
    case 1: return currency;
    case 2: return entityAddress;
    case 3: return name;
    case 4: return symbol;
    case 5: return totalSupply;
    case 6: return decimals;
    case 7: return timestamp;
    case 8: return offset;
    case 9: return partition;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: EventId = (com.networknt.taiji.event.EventId)value$; break;
    case 1: currency = (java.lang.CharSequence)value$; break;
    case 2: entityAddress = (java.lang.CharSequence)value$; break;
    case 3: name = (java.lang.CharSequence)value$; break;
    case 4: symbol = (java.lang.CharSequence)value$; break;
    case 5: totalSupply = (java.lang.Long)value$; break;
    case 6: decimals = (java.lang.Integer)value$; break;
    case 7: timestamp = (java.lang.Long)value$; break;
    case 8: offset = (java.lang.Long)value$; break;
    case 9: partition = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'EventId' field.
   * @return The value of the 'EventId' field.
   */
  public com.networknt.taiji.event.EventId getEventId() {
    return EventId;
  }

  /**
   * Sets the value of the 'EventId' field.
   * @param value the value to set.
   */
  public void setEventId(com.networknt.taiji.event.EventId value) {
    this.EventId = value;
  }

  /**
   * Gets the value of the 'currency' field.
   * @return the currency blockchain the token is associated to
   */
  public java.lang.CharSequence getCurrency() {
    return currency;
  }

  /**
   * Sets the value of the 'currency' field.
   * the currency blockchain the token is associated to
   * @param value the value to set.
   */
  public void setCurrency(java.lang.CharSequence value) {
    this.currency = value;
  }

  /**
   * Gets the value of the 'entityAddress' field.
   * @return token address which is the unique identifier
   */
  public java.lang.CharSequence getEntityAddress() {
    return entityAddress;
  }

  /**
   * Sets the value of the 'entityAddress' field.
   * token address which is the unique identifier
   * @param value the value to set.
   */
  public void setEntityAddress(java.lang.CharSequence value) {
    this.entityAddress = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return name of the token
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * name of the token
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'symbol' field.
   * @return token symbol which is one word capitalized
   */
  public java.lang.CharSequence getSymbol() {
    return symbol;
  }

  /**
   * Sets the value of the 'symbol' field.
   * token symbol which is one word capitalized
   * @param value the value to set.
   */
  public void setSymbol(java.lang.CharSequence value) {
    this.symbol = value;
  }

  /**
   * Gets the value of the 'totalSupply' field.
   * @return total supply of the token
   */
  public java.lang.Long getTotalSupply() {
    return totalSupply;
  }

  /**
   * Sets the value of the 'totalSupply' field.
   * total supply of the token
   * @param value the value to set.
   */
  public void setTotalSupply(java.lang.Long value) {
    this.totalSupply = value;
  }

  /**
   * Gets the value of the 'decimals' field.
   * @return number of decimals a token can be split
   */
  public java.lang.Integer getDecimals() {
    return decimals;
  }

  /**
   * Sets the value of the 'decimals' field.
   * number of decimals a token can be split
   * @param value the value to set.
   */
  public void setDecimals(java.lang.Integer value) {
    this.decimals = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return time the event is recorded on the blockchain
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * time the event is recorded on the blockchain
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'offset' field.
   * @return kafka partition offset
   */
  public java.lang.Long getOffset() {
    return offset;
  }

  /**
   * Sets the value of the 'offset' field.
   * kafka partition offset
   * @param value the value to set.
   */
  public void setOffset(java.lang.Long value) {
    this.offset = value;
  }

  /**
   * Gets the value of the 'partition' field.
   * @return kafka partition id
   */
  public java.lang.Integer getPartition() {
    return partition;
  }

  /**
   * Sets the value of the 'partition' field.
   * kafka partition id
   * @param value the value to set.
   */
  public void setPartition(java.lang.Integer value) {
    this.partition = value;
  }

  /**
   * Creates a new TokenCreatedEvent RecordBuilder.
   * @return A new TokenCreatedEvent RecordBuilder
   */
  public static com.networknt.taiji.token.TokenCreatedEvent.Builder newBuilder() {
    return new com.networknt.taiji.token.TokenCreatedEvent.Builder();
  }

  /**
   * Creates a new TokenCreatedEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TokenCreatedEvent RecordBuilder
   */
  public static com.networknt.taiji.token.TokenCreatedEvent.Builder newBuilder(com.networknt.taiji.token.TokenCreatedEvent.Builder other) {
    return new com.networknt.taiji.token.TokenCreatedEvent.Builder(other);
  }

  /**
   * Creates a new TokenCreatedEvent RecordBuilder by copying an existing TokenCreatedEvent instance.
   * @param other The existing instance to copy.
   * @return A new TokenCreatedEvent RecordBuilder
   */
  public static com.networknt.taiji.token.TokenCreatedEvent.Builder newBuilder(com.networknt.taiji.token.TokenCreatedEvent other) {
    return new com.networknt.taiji.token.TokenCreatedEvent.Builder(other);
  }

  /**
   * RecordBuilder for TokenCreatedEvent instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TokenCreatedEvent>
    implements org.apache.avro.data.RecordBuilder<TokenCreatedEvent> {

    private com.networknt.taiji.event.EventId EventId;
    private com.networknt.taiji.event.EventId.Builder EventIdBuilder;
    /** the currency blockchain the token is associated to */
    private java.lang.CharSequence currency;
    /** token address which is the unique identifier */
    private java.lang.CharSequence entityAddress;
    /** name of the token */
    private java.lang.CharSequence name;
    /** token symbol which is one word capitalized */
    private java.lang.CharSequence symbol;
    /** total supply of the token */
    private long totalSupply;
    /** number of decimals a token can be split */
    private int decimals;
    /** time the event is recorded on the blockchain */
    private java.lang.Long timestamp;
    /** kafka partition offset */
    private java.lang.Long offset;
    /** kafka partition id */
    private java.lang.Integer partition;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.networknt.taiji.token.TokenCreatedEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.EventId)) {
        this.EventId = data().deepCopy(fields()[0].schema(), other.EventId);
        fieldSetFlags()[0] = true;
      }
      if (other.hasEventIdBuilder()) {
        this.EventIdBuilder = com.networknt.taiji.event.EventId.newBuilder(other.getEventIdBuilder());
      }
      if (isValidValue(fields()[1], other.currency)) {
        this.currency = data().deepCopy(fields()[1].schema(), other.currency);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.entityAddress)) {
        this.entityAddress = data().deepCopy(fields()[2].schema(), other.entityAddress);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.name)) {
        this.name = data().deepCopy(fields()[3].schema(), other.name);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.symbol)) {
        this.symbol = data().deepCopy(fields()[4].schema(), other.symbol);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.totalSupply)) {
        this.totalSupply = data().deepCopy(fields()[5].schema(), other.totalSupply);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.decimals)) {
        this.decimals = data().deepCopy(fields()[6].schema(), other.decimals);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[7].schema(), other.timestamp);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.offset)) {
        this.offset = data().deepCopy(fields()[8].schema(), other.offset);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.partition)) {
        this.partition = data().deepCopy(fields()[9].schema(), other.partition);
        fieldSetFlags()[9] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TokenCreatedEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.networknt.taiji.token.TokenCreatedEvent other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.EventId)) {
        this.EventId = data().deepCopy(fields()[0].schema(), other.EventId);
        fieldSetFlags()[0] = true;
      }
      this.EventIdBuilder = null;
      if (isValidValue(fields()[1], other.currency)) {
        this.currency = data().deepCopy(fields()[1].schema(), other.currency);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.entityAddress)) {
        this.entityAddress = data().deepCopy(fields()[2].schema(), other.entityAddress);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.name)) {
        this.name = data().deepCopy(fields()[3].schema(), other.name);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.symbol)) {
        this.symbol = data().deepCopy(fields()[4].schema(), other.symbol);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.totalSupply)) {
        this.totalSupply = data().deepCopy(fields()[5].schema(), other.totalSupply);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.decimals)) {
        this.decimals = data().deepCopy(fields()[6].schema(), other.decimals);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[7].schema(), other.timestamp);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.offset)) {
        this.offset = data().deepCopy(fields()[8].schema(), other.offset);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.partition)) {
        this.partition = data().deepCopy(fields()[9].schema(), other.partition);
        fieldSetFlags()[9] = true;
      }
    }

    /**
      * Gets the value of the 'EventId' field.
      * @return The value.
      */
    public com.networknt.taiji.event.EventId getEventId() {
      return EventId;
    }

    /**
      * Sets the value of the 'EventId' field.
      * @param value The value of 'EventId'.
      * @return This builder.
      */
    public com.networknt.taiji.token.TokenCreatedEvent.Builder setEventId(com.networknt.taiji.event.EventId value) {
      validate(fields()[0], value);
      this.EventIdBuilder = null;
      this.EventId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'EventId' field has been set.
      * @return True if the 'EventId' field has been set, false otherwise.
      */
    public boolean hasEventId() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'EventId' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.networknt.taiji.event.EventId.Builder getEventIdBuilder() {
      if (EventIdBuilder == null) {
        if (hasEventId()) {
          setEventIdBuilder(com.networknt.taiji.event.EventId.newBuilder(EventId));
        } else {
          setEventIdBuilder(com.networknt.taiji.event.EventId.newBuilder());
        }
      }
      return EventIdBuilder;
    }

    /**
     * Sets the Builder instance for the 'EventId' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.networknt.taiji.token.TokenCreatedEvent.Builder setEventIdBuilder(com.networknt.taiji.event.EventId.Builder value) {
      clearEventId();
      EventIdBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'EventId' field has an active Builder instance
     * @return True if the 'EventId' field has an active Builder instance
     */
    public boolean hasEventIdBuilder() {
      return EventIdBuilder != null;
    }

    /**
      * Clears the value of the 'EventId' field.
      * @return This builder.
      */
    public com.networknt.taiji.token.TokenCreatedEvent.Builder clearEventId() {
      EventId = null;
      EventIdBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'currency' field.
      * the currency blockchain the token is associated to
      * @return The value.
      */
    public java.lang.CharSequence getCurrency() {
      return currency;
    }

    /**
      * Sets the value of the 'currency' field.
      * the currency blockchain the token is associated to
      * @param value The value of 'currency'.
      * @return This builder.
      */
    public com.networknt.taiji.token.TokenCreatedEvent.Builder setCurrency(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.currency = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'currency' field has been set.
      * the currency blockchain the token is associated to
      * @return True if the 'currency' field has been set, false otherwise.
      */
    public boolean hasCurrency() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'currency' field.
      * the currency blockchain the token is associated to
      * @return This builder.
      */
    public com.networknt.taiji.token.TokenCreatedEvent.Builder clearCurrency() {
      currency = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'entityAddress' field.
      * token address which is the unique identifier
      * @return The value.
      */
    public java.lang.CharSequence getEntityAddress() {
      return entityAddress;
    }

    /**
      * Sets the value of the 'entityAddress' field.
      * token address which is the unique identifier
      * @param value The value of 'entityAddress'.
      * @return This builder.
      */
    public com.networknt.taiji.token.TokenCreatedEvent.Builder setEntityAddress(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.entityAddress = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'entityAddress' field has been set.
      * token address which is the unique identifier
      * @return True if the 'entityAddress' field has been set, false otherwise.
      */
    public boolean hasEntityAddress() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'entityAddress' field.
      * token address which is the unique identifier
      * @return This builder.
      */
    public com.networknt.taiji.token.TokenCreatedEvent.Builder clearEntityAddress() {
      entityAddress = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * name of the token
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * name of the token
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.networknt.taiji.token.TokenCreatedEvent.Builder setName(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.name = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * name of the token
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'name' field.
      * name of the token
      * @return This builder.
      */
    public com.networknt.taiji.token.TokenCreatedEvent.Builder clearName() {
      name = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'symbol' field.
      * token symbol which is one word capitalized
      * @return The value.
      */
    public java.lang.CharSequence getSymbol() {
      return symbol;
    }

    /**
      * Sets the value of the 'symbol' field.
      * token symbol which is one word capitalized
      * @param value The value of 'symbol'.
      * @return This builder.
      */
    public com.networknt.taiji.token.TokenCreatedEvent.Builder setSymbol(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.symbol = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'symbol' field has been set.
      * token symbol which is one word capitalized
      * @return True if the 'symbol' field has been set, false otherwise.
      */
    public boolean hasSymbol() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'symbol' field.
      * token symbol which is one word capitalized
      * @return This builder.
      */
    public com.networknt.taiji.token.TokenCreatedEvent.Builder clearSymbol() {
      symbol = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalSupply' field.
      * total supply of the token
      * @return The value.
      */
    public java.lang.Long getTotalSupply() {
      return totalSupply;
    }

    /**
      * Sets the value of the 'totalSupply' field.
      * total supply of the token
      * @param value The value of 'totalSupply'.
      * @return This builder.
      */
    public com.networknt.taiji.token.TokenCreatedEvent.Builder setTotalSupply(long value) {
      validate(fields()[5], value);
      this.totalSupply = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'totalSupply' field has been set.
      * total supply of the token
      * @return True if the 'totalSupply' field has been set, false otherwise.
      */
    public boolean hasTotalSupply() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'totalSupply' field.
      * total supply of the token
      * @return This builder.
      */
    public com.networknt.taiji.token.TokenCreatedEvent.Builder clearTotalSupply() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'decimals' field.
      * number of decimals a token can be split
      * @return The value.
      */
    public java.lang.Integer getDecimals() {
      return decimals;
    }

    /**
      * Sets the value of the 'decimals' field.
      * number of decimals a token can be split
      * @param value The value of 'decimals'.
      * @return This builder.
      */
    public com.networknt.taiji.token.TokenCreatedEvent.Builder setDecimals(int value) {
      validate(fields()[6], value);
      this.decimals = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'decimals' field has been set.
      * number of decimals a token can be split
      * @return True if the 'decimals' field has been set, false otherwise.
      */
    public boolean hasDecimals() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'decimals' field.
      * number of decimals a token can be split
      * @return This builder.
      */
    public com.networknt.taiji.token.TokenCreatedEvent.Builder clearDecimals() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * time the event is recorded on the blockchain
      * @return The value.
      */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * time the event is recorded on the blockchain
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.networknt.taiji.token.TokenCreatedEvent.Builder setTimestamp(java.lang.Long value) {
      validate(fields()[7], value);
      this.timestamp = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * time the event is recorded on the blockchain
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * time the event is recorded on the blockchain
      * @return This builder.
      */
    public com.networknt.taiji.token.TokenCreatedEvent.Builder clearTimestamp() {
      timestamp = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'offset' field.
      * kafka partition offset
      * @return The value.
      */
    public java.lang.Long getOffset() {
      return offset;
    }

    /**
      * Sets the value of the 'offset' field.
      * kafka partition offset
      * @param value The value of 'offset'.
      * @return This builder.
      */
    public com.networknt.taiji.token.TokenCreatedEvent.Builder setOffset(java.lang.Long value) {
      validate(fields()[8], value);
      this.offset = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'offset' field has been set.
      * kafka partition offset
      * @return True if the 'offset' field has been set, false otherwise.
      */
    public boolean hasOffset() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'offset' field.
      * kafka partition offset
      * @return This builder.
      */
    public com.networknt.taiji.token.TokenCreatedEvent.Builder clearOffset() {
      offset = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'partition' field.
      * kafka partition id
      * @return The value.
      */
    public java.lang.Integer getPartition() {
      return partition;
    }

    /**
      * Sets the value of the 'partition' field.
      * kafka partition id
      * @param value The value of 'partition'.
      * @return This builder.
      */
    public com.networknt.taiji.token.TokenCreatedEvent.Builder setPartition(java.lang.Integer value) {
      validate(fields()[9], value);
      this.partition = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'partition' field has been set.
      * kafka partition id
      * @return True if the 'partition' field has been set, false otherwise.
      */
    public boolean hasPartition() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'partition' field.
      * kafka partition id
      * @return This builder.
      */
    public com.networknt.taiji.token.TokenCreatedEvent.Builder clearPartition() {
      partition = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TokenCreatedEvent build() {
      try {
        TokenCreatedEvent record = new TokenCreatedEvent();
        if (EventIdBuilder != null) {
          record.EventId = this.EventIdBuilder.build();
        } else {
          record.EventId = fieldSetFlags()[0] ? this.EventId : (com.networknt.taiji.event.EventId) defaultValue(fields()[0]);
        }
        record.currency = fieldSetFlags()[1] ? this.currency : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.entityAddress = fieldSetFlags()[2] ? this.entityAddress : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.name = fieldSetFlags()[3] ? this.name : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.symbol = fieldSetFlags()[4] ? this.symbol : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.totalSupply = fieldSetFlags()[5] ? this.totalSupply : (java.lang.Long) defaultValue(fields()[5]);
        record.decimals = fieldSetFlags()[6] ? this.decimals : (java.lang.Integer) defaultValue(fields()[6]);
        record.timestamp = fieldSetFlags()[7] ? this.timestamp : (java.lang.Long) defaultValue(fields()[7]);
        record.offset = fieldSetFlags()[8] ? this.offset : (java.lang.Long) defaultValue(fields()[8]);
        record.partition = fieldSetFlags()[9] ? this.partition : (java.lang.Integer) defaultValue(fields()[9]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TokenCreatedEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<TokenCreatedEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TokenCreatedEvent>
    READER$ = (org.apache.avro.io.DatumReader<TokenCreatedEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
