/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.networknt.taiji.token;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TokenCreatedEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord, TokenEvent {
  private static final long serialVersionUID = 5123626456919881235L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TokenCreatedEvent\",\"namespace\":\"com.networknt.taiji.token\",\"fields\":[{\"name\":\"ownerAddress\",\"type\":\"string\"},{\"name\":\"tokenAddress\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"total\",\"type\":\"long\"},{\"name\":\"decimals\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TokenCreatedEvent> ENCODER =
      new BinaryMessageEncoder<TokenCreatedEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TokenCreatedEvent> DECODER =
      new BinaryMessageDecoder<TokenCreatedEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<TokenCreatedEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<TokenCreatedEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TokenCreatedEvent>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this TokenCreatedEvent to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a TokenCreatedEvent from a ByteBuffer. */
  public static TokenCreatedEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence ownerAddress;
  @Deprecated public java.lang.CharSequence tokenAddress;
  @Deprecated public java.lang.CharSequence name;
  @Deprecated public java.lang.CharSequence symbol;
  @Deprecated public long total;
  @Deprecated public int decimals;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TokenCreatedEvent() {}

  /**
   * All-args constructor.
   * @param ownerAddress The new value for ownerAddress
   * @param tokenAddress The new value for tokenAddress
   * @param name The new value for name
   * @param symbol The new value for symbol
   * @param total The new value for total
   * @param decimals The new value for decimals
   */
  public TokenCreatedEvent(java.lang.CharSequence ownerAddress, java.lang.CharSequence tokenAddress, java.lang.CharSequence name, java.lang.CharSequence symbol, java.lang.Long total, java.lang.Integer decimals) {
    this.ownerAddress = ownerAddress;
    this.tokenAddress = tokenAddress;
    this.name = name;
    this.symbol = symbol;
    this.total = total;
    this.decimals = decimals;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return ownerAddress;
    case 1: return tokenAddress;
    case 2: return name;
    case 3: return symbol;
    case 4: return total;
    case 5: return decimals;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: ownerAddress = (java.lang.CharSequence)value$; break;
    case 1: tokenAddress = (java.lang.CharSequence)value$; break;
    case 2: name = (java.lang.CharSequence)value$; break;
    case 3: symbol = (java.lang.CharSequence)value$; break;
    case 4: total = (java.lang.Long)value$; break;
    case 5: decimals = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'ownerAddress' field.
   * @return The value of the 'ownerAddress' field.
   */
  public java.lang.CharSequence getOwnerAddress() {
    return ownerAddress;
  }

  /**
   * Sets the value of the 'ownerAddress' field.
   * @param value the value to set.
   */
  public void setOwnerAddress(java.lang.CharSequence value) {
    this.ownerAddress = value;
  }

  /**
   * Gets the value of the 'tokenAddress' field.
   * @return The value of the 'tokenAddress' field.
   */
  public java.lang.CharSequence getTokenAddress() {
    return tokenAddress;
  }

  /**
   * Sets the value of the 'tokenAddress' field.
   * @param value the value to set.
   */
  public void setTokenAddress(java.lang.CharSequence value) {
    this.tokenAddress = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'symbol' field.
   * @return The value of the 'symbol' field.
   */
  public java.lang.CharSequence getSymbol() {
    return symbol;
  }

  /**
   * Sets the value of the 'symbol' field.
   * @param value the value to set.
   */
  public void setSymbol(java.lang.CharSequence value) {
    this.symbol = value;
  }

  /**
   * Gets the value of the 'total' field.
   * @return The value of the 'total' field.
   */
  public java.lang.Long getTotal() {
    return total;
  }

  /**
   * Sets the value of the 'total' field.
   * @param value the value to set.
   */
  public void setTotal(java.lang.Long value) {
    this.total = value;
  }

  /**
   * Gets the value of the 'decimals' field.
   * @return The value of the 'decimals' field.
   */
  public java.lang.Integer getDecimals() {
    return decimals;
  }

  /**
   * Sets the value of the 'decimals' field.
   * @param value the value to set.
   */
  public void setDecimals(java.lang.Integer value) {
    this.decimals = value;
  }

  /**
   * Creates a new TokenCreatedEvent RecordBuilder.
   * @return A new TokenCreatedEvent RecordBuilder
   */
  public static com.networknt.taiji.token.TokenCreatedEvent.Builder newBuilder() {
    return new com.networknt.taiji.token.TokenCreatedEvent.Builder();
  }

  /**
   * Creates a new TokenCreatedEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TokenCreatedEvent RecordBuilder
   */
  public static com.networknt.taiji.token.TokenCreatedEvent.Builder newBuilder(com.networknt.taiji.token.TokenCreatedEvent.Builder other) {
    return new com.networknt.taiji.token.TokenCreatedEvent.Builder(other);
  }

  /**
   * Creates a new TokenCreatedEvent RecordBuilder by copying an existing TokenCreatedEvent instance.
   * @param other The existing instance to copy.
   * @return A new TokenCreatedEvent RecordBuilder
   */
  public static com.networknt.taiji.token.TokenCreatedEvent.Builder newBuilder(com.networknt.taiji.token.TokenCreatedEvent other) {
    return new com.networknt.taiji.token.TokenCreatedEvent.Builder(other);
  }

  /**
   * RecordBuilder for TokenCreatedEvent instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TokenCreatedEvent>
    implements org.apache.avro.data.RecordBuilder<TokenCreatedEvent> {

    private java.lang.CharSequence ownerAddress;
    private java.lang.CharSequence tokenAddress;
    private java.lang.CharSequence name;
    private java.lang.CharSequence symbol;
    private long total;
    private int decimals;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.networknt.taiji.token.TokenCreatedEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.ownerAddress)) {
        this.ownerAddress = data().deepCopy(fields()[0].schema(), other.ownerAddress);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tokenAddress)) {
        this.tokenAddress = data().deepCopy(fields()[1].schema(), other.tokenAddress);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.name)) {
        this.name = data().deepCopy(fields()[2].schema(), other.name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.symbol)) {
        this.symbol = data().deepCopy(fields()[3].schema(), other.symbol);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.total)) {
        this.total = data().deepCopy(fields()[4].schema(), other.total);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.decimals)) {
        this.decimals = data().deepCopy(fields()[5].schema(), other.decimals);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TokenCreatedEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.networknt.taiji.token.TokenCreatedEvent other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.ownerAddress)) {
        this.ownerAddress = data().deepCopy(fields()[0].schema(), other.ownerAddress);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tokenAddress)) {
        this.tokenAddress = data().deepCopy(fields()[1].schema(), other.tokenAddress);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.name)) {
        this.name = data().deepCopy(fields()[2].schema(), other.name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.symbol)) {
        this.symbol = data().deepCopy(fields()[3].schema(), other.symbol);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.total)) {
        this.total = data().deepCopy(fields()[4].schema(), other.total);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.decimals)) {
        this.decimals = data().deepCopy(fields()[5].schema(), other.decimals);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'ownerAddress' field.
      * @return The value.
      */
    public java.lang.CharSequence getOwnerAddress() {
      return ownerAddress;
    }

    /**
      * Sets the value of the 'ownerAddress' field.
      * @param value The value of 'ownerAddress'.
      * @return This builder.
      */
    public com.networknt.taiji.token.TokenCreatedEvent.Builder setOwnerAddress(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.ownerAddress = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'ownerAddress' field has been set.
      * @return True if the 'ownerAddress' field has been set, false otherwise.
      */
    public boolean hasOwnerAddress() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'ownerAddress' field.
      * @return This builder.
      */
    public com.networknt.taiji.token.TokenCreatedEvent.Builder clearOwnerAddress() {
      ownerAddress = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'tokenAddress' field.
      * @return The value.
      */
    public java.lang.CharSequence getTokenAddress() {
      return tokenAddress;
    }

    /**
      * Sets the value of the 'tokenAddress' field.
      * @param value The value of 'tokenAddress'.
      * @return This builder.
      */
    public com.networknt.taiji.token.TokenCreatedEvent.Builder setTokenAddress(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.tokenAddress = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'tokenAddress' field has been set.
      * @return True if the 'tokenAddress' field has been set, false otherwise.
      */
    public boolean hasTokenAddress() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'tokenAddress' field.
      * @return This builder.
      */
    public com.networknt.taiji.token.TokenCreatedEvent.Builder clearTokenAddress() {
      tokenAddress = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.networknt.taiji.token.TokenCreatedEvent.Builder setName(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.name = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.networknt.taiji.token.TokenCreatedEvent.Builder clearName() {
      name = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'symbol' field.
      * @return The value.
      */
    public java.lang.CharSequence getSymbol() {
      return symbol;
    }

    /**
      * Sets the value of the 'symbol' field.
      * @param value The value of 'symbol'.
      * @return This builder.
      */
    public com.networknt.taiji.token.TokenCreatedEvent.Builder setSymbol(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.symbol = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'symbol' field has been set.
      * @return True if the 'symbol' field has been set, false otherwise.
      */
    public boolean hasSymbol() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'symbol' field.
      * @return This builder.
      */
    public com.networknt.taiji.token.TokenCreatedEvent.Builder clearSymbol() {
      symbol = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'total' field.
      * @return The value.
      */
    public java.lang.Long getTotal() {
      return total;
    }

    /**
      * Sets the value of the 'total' field.
      * @param value The value of 'total'.
      * @return This builder.
      */
    public com.networknt.taiji.token.TokenCreatedEvent.Builder setTotal(long value) {
      validate(fields()[4], value);
      this.total = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'total' field has been set.
      * @return True if the 'total' field has been set, false otherwise.
      */
    public boolean hasTotal() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'total' field.
      * @return This builder.
      */
    public com.networknt.taiji.token.TokenCreatedEvent.Builder clearTotal() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'decimals' field.
      * @return The value.
      */
    public java.lang.Integer getDecimals() {
      return decimals;
    }

    /**
      * Sets the value of the 'decimals' field.
      * @param value The value of 'decimals'.
      * @return This builder.
      */
    public com.networknt.taiji.token.TokenCreatedEvent.Builder setDecimals(int value) {
      validate(fields()[5], value);
      this.decimals = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'decimals' field has been set.
      * @return True if the 'decimals' field has been set, false otherwise.
      */
    public boolean hasDecimals() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'decimals' field.
      * @return This builder.
      */
    public com.networknt.taiji.token.TokenCreatedEvent.Builder clearDecimals() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TokenCreatedEvent build() {
      try {
        TokenCreatedEvent record = new TokenCreatedEvent();
        record.ownerAddress = fieldSetFlags()[0] ? this.ownerAddress : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.tokenAddress = fieldSetFlags()[1] ? this.tokenAddress : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.name = fieldSetFlags()[2] ? this.name : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.symbol = fieldSetFlags()[3] ? this.symbol : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.total = fieldSetFlags()[4] ? this.total : (java.lang.Long) defaultValue(fields()[4]);
        record.decimals = fieldSetFlags()[5] ? this.decimals : (java.lang.Integer) defaultValue(fields()[5]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TokenCreatedEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<TokenCreatedEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TokenCreatedEvent>
    READER$ = (org.apache.avro.io.DatumReader<TokenCreatedEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
