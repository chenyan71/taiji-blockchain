/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.networknt.taiji.token;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TokenAccount extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5701189941888852080L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TokenAccount\",\"namespace\":\"com.networknt.taiji.token\",\"fields\":[{\"name\":\"symbols\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"record\",\"name\":\"Account\",\"fields\":[{\"name\":\"balance\",\"type\":\"long\",\"doc\":\"current token balance for the symbol\",\"default\":0},{\"name\":\"approval\",\"type\":{\"type\":\"map\",\"values\":\"long\"},\"doc\":\"approval from a token holder to withdraw\",\"default\":null},{\"name\":\"allowance\",\"type\":{\"type\":\"map\",\"values\":\"long\"},\"doc\":\"allowance to the other address to withdraw\",\"default\":null}]}},\"doc\":\"each symbol has a map of balance, approval or allowance\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TokenAccount> ENCODER =
      new BinaryMessageEncoder<TokenAccount>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TokenAccount> DECODER =
      new BinaryMessageDecoder<TokenAccount>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<TokenAccount> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<TokenAccount> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TokenAccount>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this TokenAccount to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a TokenAccount from a ByteBuffer. */
  public static TokenAccount fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** each symbol has a map of balance, approval or allowance */
  @Deprecated public java.util.Map<java.lang.CharSequence,com.networknt.taiji.token.Account> symbols;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TokenAccount() {}

  /**
   * All-args constructor.
   * @param symbols each symbol has a map of balance, approval or allowance
   */
  public TokenAccount(java.util.Map<java.lang.CharSequence,com.networknt.taiji.token.Account> symbols) {
    this.symbols = symbols;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return symbols;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: symbols = (java.util.Map<java.lang.CharSequence,com.networknt.taiji.token.Account>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'symbols' field.
   * @return each symbol has a map of balance, approval or allowance
   */
  public java.util.Map<java.lang.CharSequence,com.networknt.taiji.token.Account> getSymbols() {
    return symbols;
  }

  /**
   * Sets the value of the 'symbols' field.
   * each symbol has a map of balance, approval or allowance
   * @param value the value to set.
   */
  public void setSymbols(java.util.Map<java.lang.CharSequence,com.networknt.taiji.token.Account> value) {
    this.symbols = value;
  }

  /**
   * Creates a new TokenAccount RecordBuilder.
   * @return A new TokenAccount RecordBuilder
   */
  public static com.networknt.taiji.token.TokenAccount.Builder newBuilder() {
    return new com.networknt.taiji.token.TokenAccount.Builder();
  }

  /**
   * Creates a new TokenAccount RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TokenAccount RecordBuilder
   */
  public static com.networknt.taiji.token.TokenAccount.Builder newBuilder(com.networknt.taiji.token.TokenAccount.Builder other) {
    return new com.networknt.taiji.token.TokenAccount.Builder(other);
  }

  /**
   * Creates a new TokenAccount RecordBuilder by copying an existing TokenAccount instance.
   * @param other The existing instance to copy.
   * @return A new TokenAccount RecordBuilder
   */
  public static com.networknt.taiji.token.TokenAccount.Builder newBuilder(com.networknt.taiji.token.TokenAccount other) {
    return new com.networknt.taiji.token.TokenAccount.Builder(other);
  }

  /**
   * RecordBuilder for TokenAccount instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TokenAccount>
    implements org.apache.avro.data.RecordBuilder<TokenAccount> {

    /** each symbol has a map of balance, approval or allowance */
    private java.util.Map<java.lang.CharSequence,com.networknt.taiji.token.Account> symbols;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.networknt.taiji.token.TokenAccount.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.symbols)) {
        this.symbols = data().deepCopy(fields()[0].schema(), other.symbols);
        fieldSetFlags()[0] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TokenAccount instance
     * @param other The existing instance to copy.
     */
    private Builder(com.networknt.taiji.token.TokenAccount other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.symbols)) {
        this.symbols = data().deepCopy(fields()[0].schema(), other.symbols);
        fieldSetFlags()[0] = true;
      }
    }

    /**
      * Gets the value of the 'symbols' field.
      * each symbol has a map of balance, approval or allowance
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,com.networknt.taiji.token.Account> getSymbols() {
      return symbols;
    }

    /**
      * Sets the value of the 'symbols' field.
      * each symbol has a map of balance, approval or allowance
      * @param value The value of 'symbols'.
      * @return This builder.
      */
    public com.networknt.taiji.token.TokenAccount.Builder setSymbols(java.util.Map<java.lang.CharSequence,com.networknt.taiji.token.Account> value) {
      validate(fields()[0], value);
      this.symbols = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'symbols' field has been set.
      * each symbol has a map of balance, approval or allowance
      * @return True if the 'symbols' field has been set, false otherwise.
      */
    public boolean hasSymbols() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'symbols' field.
      * each symbol has a map of balance, approval or allowance
      * @return This builder.
      */
    public com.networknt.taiji.token.TokenAccount.Builder clearSymbols() {
      symbols = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TokenAccount build() {
      try {
        TokenAccount record = new TokenAccount();
        record.symbols = fieldSetFlags()[0] ? this.symbols : (java.util.Map<java.lang.CharSequence,com.networknt.taiji.token.Account>) defaultValue(fields()[0]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TokenAccount>
    WRITER$ = (org.apache.avro.io.DatumWriter<TokenAccount>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TokenAccount>
    READER$ = (org.apache.avro.io.DatumReader<TokenAccount>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
