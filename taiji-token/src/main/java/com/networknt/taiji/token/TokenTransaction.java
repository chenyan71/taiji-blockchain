/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.networknt.taiji.token;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TokenTransaction extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4824564263511087913L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TokenTransaction\",\"namespace\":\"com.networknt.taiji.token\",\"fields\":[{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"transaction timestamp in milliseconds from epoch\"},{\"name\":\"symbol\",\"type\":\"string\",\"doc\":\"token symbol which is one word capitalized\"},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"TokenTranType\",\"symbols\":[\"T\",\"A\"]},\"doc\":\"token transaction type, T for transaction and A for Approval and Allowance\"},{\"name\":\"from\",\"type\":\"string\",\"doc\":\"from address\"},{\"name\":\"to\",\"type\":\"string\",\"doc\":\"to address\"},{\"name\":\"amount\",\"type\":\"long\",\"doc\":\"transaction amount\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TokenTransaction> ENCODER =
      new BinaryMessageEncoder<TokenTransaction>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TokenTransaction> DECODER =
      new BinaryMessageDecoder<TokenTransaction>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<TokenTransaction> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<TokenTransaction> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TokenTransaction>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this TokenTransaction to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a TokenTransaction from a ByteBuffer. */
  public static TokenTransaction fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** transaction timestamp in milliseconds from epoch */
  @Deprecated public long timestamp;
  /** token symbol which is one word capitalized */
  @Deprecated public java.lang.CharSequence symbol;
  /** token transaction type, T for transaction and A for Approval and Allowance */
  @Deprecated public com.networknt.taiji.token.TokenTranType type;
  /** from address */
  @Deprecated public java.lang.CharSequence from;
  /** to address */
  @Deprecated public java.lang.CharSequence to;
  /** transaction amount */
  @Deprecated public long amount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TokenTransaction() {}

  /**
   * All-args constructor.
   * @param timestamp transaction timestamp in milliseconds from epoch
   * @param symbol token symbol which is one word capitalized
   * @param type token transaction type, T for transaction and A for Approval and Allowance
   * @param from from address
   * @param to to address
   * @param amount transaction amount
   */
  public TokenTransaction(java.lang.Long timestamp, java.lang.CharSequence symbol, com.networknt.taiji.token.TokenTranType type, java.lang.CharSequence from, java.lang.CharSequence to, java.lang.Long amount) {
    this.timestamp = timestamp;
    this.symbol = symbol;
    this.type = type;
    this.from = from;
    this.to = to;
    this.amount = amount;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return timestamp;
    case 1: return symbol;
    case 2: return type;
    case 3: return from;
    case 4: return to;
    case 5: return amount;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: timestamp = (java.lang.Long)value$; break;
    case 1: symbol = (java.lang.CharSequence)value$; break;
    case 2: type = (com.networknt.taiji.token.TokenTranType)value$; break;
    case 3: from = (java.lang.CharSequence)value$; break;
    case 4: to = (java.lang.CharSequence)value$; break;
    case 5: amount = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return transaction timestamp in milliseconds from epoch
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * transaction timestamp in milliseconds from epoch
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'symbol' field.
   * @return token symbol which is one word capitalized
   */
  public java.lang.CharSequence getSymbol() {
    return symbol;
  }

  /**
   * Sets the value of the 'symbol' field.
   * token symbol which is one word capitalized
   * @param value the value to set.
   */
  public void setSymbol(java.lang.CharSequence value) {
    this.symbol = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return token transaction type, T for transaction and A for Approval and Allowance
   */
  public com.networknt.taiji.token.TokenTranType getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * token transaction type, T for transaction and A for Approval and Allowance
   * @param value the value to set.
   */
  public void setType(com.networknt.taiji.token.TokenTranType value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'from' field.
   * @return from address
   */
  public java.lang.CharSequence getFrom() {
    return from;
  }

  /**
   * Sets the value of the 'from' field.
   * from address
   * @param value the value to set.
   */
  public void setFrom(java.lang.CharSequence value) {
    this.from = value;
  }

  /**
   * Gets the value of the 'to' field.
   * @return to address
   */
  public java.lang.CharSequence getTo() {
    return to;
  }

  /**
   * Sets the value of the 'to' field.
   * to address
   * @param value the value to set.
   */
  public void setTo(java.lang.CharSequence value) {
    this.to = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return transaction amount
   */
  public java.lang.Long getAmount() {
    return amount;
  }

  /**
   * Sets the value of the 'amount' field.
   * transaction amount
   * @param value the value to set.
   */
  public void setAmount(java.lang.Long value) {
    this.amount = value;
  }

  /**
   * Creates a new TokenTransaction RecordBuilder.
   * @return A new TokenTransaction RecordBuilder
   */
  public static com.networknt.taiji.token.TokenTransaction.Builder newBuilder() {
    return new com.networknt.taiji.token.TokenTransaction.Builder();
  }

  /**
   * Creates a new TokenTransaction RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TokenTransaction RecordBuilder
   */
  public static com.networknt.taiji.token.TokenTransaction.Builder newBuilder(com.networknt.taiji.token.TokenTransaction.Builder other) {
    return new com.networknt.taiji.token.TokenTransaction.Builder(other);
  }

  /**
   * Creates a new TokenTransaction RecordBuilder by copying an existing TokenTransaction instance.
   * @param other The existing instance to copy.
   * @return A new TokenTransaction RecordBuilder
   */
  public static com.networknt.taiji.token.TokenTransaction.Builder newBuilder(com.networknt.taiji.token.TokenTransaction other) {
    return new com.networknt.taiji.token.TokenTransaction.Builder(other);
  }

  /**
   * RecordBuilder for TokenTransaction instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TokenTransaction>
    implements org.apache.avro.data.RecordBuilder<TokenTransaction> {

    /** transaction timestamp in milliseconds from epoch */
    private long timestamp;
    /** token symbol which is one word capitalized */
    private java.lang.CharSequence symbol;
    /** token transaction type, T for transaction and A for Approval and Allowance */
    private com.networknt.taiji.token.TokenTranType type;
    /** from address */
    private java.lang.CharSequence from;
    /** to address */
    private java.lang.CharSequence to;
    /** transaction amount */
    private long amount;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.networknt.taiji.token.TokenTransaction.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.symbol)) {
        this.symbol = data().deepCopy(fields()[1].schema(), other.symbol);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.type)) {
        this.type = data().deepCopy(fields()[2].schema(), other.type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.from)) {
        this.from = data().deepCopy(fields()[3].schema(), other.from);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.to)) {
        this.to = data().deepCopy(fields()[4].schema(), other.to);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.amount)) {
        this.amount = data().deepCopy(fields()[5].schema(), other.amount);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TokenTransaction instance
     * @param other The existing instance to copy.
     */
    private Builder(com.networknt.taiji.token.TokenTransaction other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.symbol)) {
        this.symbol = data().deepCopy(fields()[1].schema(), other.symbol);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.type)) {
        this.type = data().deepCopy(fields()[2].schema(), other.type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.from)) {
        this.from = data().deepCopy(fields()[3].schema(), other.from);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.to)) {
        this.to = data().deepCopy(fields()[4].schema(), other.to);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.amount)) {
        this.amount = data().deepCopy(fields()[5].schema(), other.amount);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'timestamp' field.
      * transaction timestamp in milliseconds from epoch
      * @return The value.
      */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * transaction timestamp in milliseconds from epoch
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.networknt.taiji.token.TokenTransaction.Builder setTimestamp(long value) {
      validate(fields()[0], value);
      this.timestamp = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * transaction timestamp in milliseconds from epoch
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * transaction timestamp in milliseconds from epoch
      * @return This builder.
      */
    public com.networknt.taiji.token.TokenTransaction.Builder clearTimestamp() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'symbol' field.
      * token symbol which is one word capitalized
      * @return The value.
      */
    public java.lang.CharSequence getSymbol() {
      return symbol;
    }

    /**
      * Sets the value of the 'symbol' field.
      * token symbol which is one word capitalized
      * @param value The value of 'symbol'.
      * @return This builder.
      */
    public com.networknt.taiji.token.TokenTransaction.Builder setSymbol(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.symbol = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'symbol' field has been set.
      * token symbol which is one word capitalized
      * @return True if the 'symbol' field has been set, false otherwise.
      */
    public boolean hasSymbol() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'symbol' field.
      * token symbol which is one word capitalized
      * @return This builder.
      */
    public com.networknt.taiji.token.TokenTransaction.Builder clearSymbol() {
      symbol = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * token transaction type, T for transaction and A for Approval and Allowance
      * @return The value.
      */
    public com.networknt.taiji.token.TokenTranType getType() {
      return type;
    }

    /**
      * Sets the value of the 'type' field.
      * token transaction type, T for transaction and A for Approval and Allowance
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.networknt.taiji.token.TokenTransaction.Builder setType(com.networknt.taiji.token.TokenTranType value) {
      validate(fields()[2], value);
      this.type = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * token transaction type, T for transaction and A for Approval and Allowance
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'type' field.
      * token transaction type, T for transaction and A for Approval and Allowance
      * @return This builder.
      */
    public com.networknt.taiji.token.TokenTransaction.Builder clearType() {
      type = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'from' field.
      * from address
      * @return The value.
      */
    public java.lang.CharSequence getFrom() {
      return from;
    }

    /**
      * Sets the value of the 'from' field.
      * from address
      * @param value The value of 'from'.
      * @return This builder.
      */
    public com.networknt.taiji.token.TokenTransaction.Builder setFrom(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.from = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'from' field has been set.
      * from address
      * @return True if the 'from' field has been set, false otherwise.
      */
    public boolean hasFrom() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'from' field.
      * from address
      * @return This builder.
      */
    public com.networknt.taiji.token.TokenTransaction.Builder clearFrom() {
      from = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'to' field.
      * to address
      * @return The value.
      */
    public java.lang.CharSequence getTo() {
      return to;
    }

    /**
      * Sets the value of the 'to' field.
      * to address
      * @param value The value of 'to'.
      * @return This builder.
      */
    public com.networknt.taiji.token.TokenTransaction.Builder setTo(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.to = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'to' field has been set.
      * to address
      * @return True if the 'to' field has been set, false otherwise.
      */
    public boolean hasTo() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'to' field.
      * to address
      * @return This builder.
      */
    public com.networknt.taiji.token.TokenTransaction.Builder clearTo() {
      to = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * transaction amount
      * @return The value.
      */
    public java.lang.Long getAmount() {
      return amount;
    }

    /**
      * Sets the value of the 'amount' field.
      * transaction amount
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public com.networknt.taiji.token.TokenTransaction.Builder setAmount(long value) {
      validate(fields()[5], value);
      this.amount = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * transaction amount
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'amount' field.
      * transaction amount
      * @return This builder.
      */
    public com.networknt.taiji.token.TokenTransaction.Builder clearAmount() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TokenTransaction build() {
      try {
        TokenTransaction record = new TokenTransaction();
        record.timestamp = fieldSetFlags()[0] ? this.timestamp : (java.lang.Long) defaultValue(fields()[0]);
        record.symbol = fieldSetFlags()[1] ? this.symbol : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.type = fieldSetFlags()[2] ? this.type : (com.networknt.taiji.token.TokenTranType) defaultValue(fields()[2]);
        record.from = fieldSetFlags()[3] ? this.from : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.to = fieldSetFlags()[4] ? this.to : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.amount = fieldSetFlags()[5] ? this.amount : (java.lang.Long) defaultValue(fields()[5]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TokenTransaction>
    WRITER$ = (org.apache.avro.io.DatumWriter<TokenTransaction>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TokenTransaction>
    READER$ = (org.apache.avro.io.DatumReader<TokenTransaction>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
